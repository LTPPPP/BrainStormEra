@page
@model BrainStormEra.Views.Home.HomePageAdminModel
@inject IHttpContextAccessor HttpContextAccessor
@{
    var userId = HttpContextAccessor.HttpContext.Request.Cookies["user_id"];
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard | BrainStormEra</title>
    <meta name="description" content="Welcome to BrainStormEra Admin Dashboard. Manage courses, users, achievements, and more efficiently.">
    <meta name="keywords" content="BrainStormEra, Admin Dashboard, Course Management, User Management, Achievements, Certificates, Chatbot">
    <link rel="canonical" href="https://www.brainstormera.com/admin/dashboard">
    <!-- Open Graph Tags -->
    <meta property="og:title" content="Admin Dashboard | BrainStormEra">
    <meta property="og:description" content="Welcome to BrainStormEra Admin Dashboard. Manage courses, users, achievements, and more efficiently.">
    <meta property="og:image" content="https://www.brainstormera.com/lib/img/Login/BrainStormEra_logo.png">
    <meta property="og:url" content="https://www.brainstormera.com/admin/dashboard">
    <meta property="og:type" content="website">
    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Admin Dashboard | BrainStormEra">
    <meta name="twitter:description" content="Welcome to BrainStormEra Admin Dashboard. Manage courses, users, achievements, and more efficiently.">
    <meta name="twitter:image" content="https://www.brainstormera.com/lib/img/Login/BrainStormEra_logo.png">

    <!-- CSS Links -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
    <link rel="icon" href="~/lib/img/BrainStormEra_logo.png" type="image/x-icon">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link href="~/css/HomePage/landing_page.css" rel="stylesheet" />
    <link href="~/css/base.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/Admin/analysis.css">
    <link href="~/css/Chatbot/chatbot.css" rel="stylesheet" />
    <link href="~/css/Notification/notification-modal.css" rel="stylesheet" />
    @* <link href="~/css/Achievement/AdminAchievement.css" rel="stylesheet" /> *@
</head>

<body>
    @await Html.PartialAsync("~/Views/Shared/Admin/Header/_Header.cshtml")

    <div class="container mt-5">
        <div class="text-center" style="margin-top: 150px;">
            <h4>REPORT AND ANALYZE</h4>
        </div>

        <div class="chart-section row">
            <div class="chart-container col-md-6">
                <canvas id="conversationChart" width="400" height="200"></canvas>
            </div>
            <div class="chart-container col-md-6">
                <canvas id="userChart" width="400" height="200"></canvas>
            </div>
        </div>
        <div class="chart-section row">
            <div class="chart-container col-md-6">
                <canvas id="courseCreatedChart" width="400" height="200"></canvas>
            </div>
            <div class="chart-container col-md-6">
                <canvas id="courseRequestedChart" width="400" height="200"></canvas>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("~/Views/Home/Notification/_NotificationsModal.cshtml")
    @await Html.PartialAsync("~/Views/Home/Notification/addNotificationModal.cshtml")
    @await Html.PartialAsync("~/Views/Home/Notification/editNotificationModal.cshtml")
    <div class="dialog-overlay" id="dialogOverlay">
        <div class="dialog">
            <h3>Select Users</h3>
            <div>
                <input type="checkbox" id="selectAllUsers" /> Select All
            </div>
            <ul id="userList"></ul>
            <button id="sendToUsers">Send</button>
        </div>
    </div>
    @await Html.PartialAsync("~/Views/Shared/Chatbot/Chatbot.cshtml")
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    <!-- JavaScript Links -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/Notification/notification.js"></script>
    <script src="~/js/Chart/Chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
            $(document).ready(function () {
                fetch('@Url.Action("GetConversationStatistics", "Chatbot")')
                    .then(response => response.json())
                    .then(data => {
                        var chartElement = document.getElementById('conversationChart');
                        if (chartElement) {
                            var ctx = chartElement.getContext('2d');
                            var chartData = {
                                labels: data.map(item => new Date(item.date).toLocaleDateString()),
                                datasets: [{
                                    label: 'Chatbot Requests',
                                    data: data.map(item => item.count),
                                    fill: false,
                                    borderColor: 'rgba(75, 192, 192, 1)',
                                    tension: 0.1
                                }]
                            };

                            new Chart(ctx, {
                                type: 'line',
                                data: chartData,
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });
                        }
                    })
                    .catch(error => console.error('Error fetching conversation statistics:', error));

                fetch('@Url.Action("GetUserStatistics", "HomePageAdmin")')
                    .then(response => response.json())
                    .then(data => {
                        var chartElement = document.getElementById('userChart');
                        if (chartElement) {
                            var ctx = chartElement.getContext('2d');
                            var chartData = {
                                labels: data.map(item => new Date(item.date).toLocaleDateString()),
                                datasets: [{
                                    label: 'New Users',
                                    data: data.map(item => item.count),
                                    fill: false,
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    tension: 0.1
                                }]
                            };

                            new Chart(ctx, {
                                type: 'line',
                                data: chartData,
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true,
                                            ticks: {
                                                stepSize: 1,
                                                callback: function (value) {
                                                    if (Number.isInteger(value)) {
                                                        return value;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                        }
                    })
                    .catch(error => console.error('Error fetching user statistics:', error));
            });
        fetch('@Url.Action("GetCourseStatistics", "HomePageAdmin")')
            .then(response => response.json())
            .then(data => {
                const requestChartData = {
                    labels: data.requests.map(item => new Date(item.Date).toLocaleDateString()),
                    datasets: [{
                        label: 'Course Requests',
                        data: data.requests.map(item => item.Count),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        fill: false,
                        tension: 0.1
                    }]
                };

                const approvalChartData = {
                    labels: data.approvals.map(item => new Date(item.Date).toLocaleDateString()),
                    datasets: [{
                        label: 'Course Approvals',
                        data: data.approvals.map(item => item.Count),
                        borderColor: 'rgba(54, 162, 235, 1)',
                        fill: false,
                        tension: 0.1
                    }]
                };

                new Chart(document.getElementById('courseRequestedChart').getContext('2d'), {
                    type: 'line',
                    data: requestChartData,
                    options: { scales: { y: { beginAtZero: true } } }
                });

                new Chart(document.getElementById('courseCreatedChart').getContext('2d'), {
                    type: 'line',
                    data: approvalChartData,
                    options: { scales: { y: { beginAtZero: true } } }
                });
            })
            .catch(error => console.error('Error fetching course statistics:', error));



        $(document).ready(function () {
            $('#notificationsModal').on('shown.bs.modal', function () {
                var userId = $('#userInfo').data('user-id');

                $.get('@Url.Action("Notifications", "Notification")', function (data) {
                    $('#notificationsModal .modal-body').html($(data).find('.modal-body').html());

                    var currenrUser = '@userId';
                    $('#selectAll').on('change', function () {
                        if (this.checked) {
                            $('.notification-item').each(function () {
                                var createdBy = $(this).data('createdby');

                                if (createdBy === currenrUser) {
                                    $(this).find('.select-notification').show().prop('checked', true);
                                }
                            });
                            $('#deleteSelected').show();
                        } else {
                            $('.select-notification').hide().prop('checked', false);
                            $('#deleteSelected').hide();
                        }
                    });
                });
            });
        });
        $(document).on('click', '.add-notification', function () {
            console.log('Add Notification button clicked');
            $('#notificationsModal').modal('hide');
            $('#addNotificationModal').modal('show');
        });

        console.log('Full Name:', '@ViewBag.FullName');
        console.log('User Picture:', '@ViewBag.UserPicture');

        function confirmLogout() {
            var result = confirm("Are you sure you want to logout?");

            if (result) {
                window.location.href = '@Url.Action("Logout", "Login")';
            }
        }

    </script>
</body>

</html>
